/*
 *
 * NDbUnit
 * Copyright (C) 2005 - 2015
 * https://github.com/fubar-coder/NDbUnit
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

using System;
using System.Collections.Specialized;
using System.Data;
using System.Data.Common;
using System.IO;
using System.Xml;

namespace NDbUnit.Core
{
    /// <summary>
    /// Represents a unit test database initialization operation.
    /// </summary>
    public interface INDbUnitTest : IDisposable
    {
        /// <summary>
        /// Occurs after DbOperation has completed.
        /// </summary>
        event PostOperationEvent PostOperation;

        /// <summary>
        /// Occurs before DbOperation begins.
        /// </summary>
        event PreOperationEvent PreOperation;

        /// <summary>
        /// Performs a database operation.
        /// </summary>
        /// <param name="dbOperationFlag">The database operation to perform.</param>
        /// <exception cref="NDbUnitException" />
        void PerformDbOperation(DbOperationFlag dbOperationFlag);

        /// <summary>
        /// Read in an xml schema file whose schema represents a set of
        /// tables in a database.  This schema file is used to build the
        /// database modification commands that are used to update the 
        /// database.  This is the first function that must be called 
        /// prior to any other functions being called on the interface.  
        /// Otherwise, an exception will be thrown.
        /// </summary>
        /// <remarks>The xml schema file can be generated by dragging and 
        /// dropping tables from Visual Studio's server explorer into a 
        /// DataSet.xsd file.</remarks>
        /// <param name="xmlSchemaFile">The schema file.</param>
        /// <exception cref="ArgumentException" />
        void ReadXmlSchema(string xmlSchemaFile);

        /// <summary>
        /// Read in an xml schema whose schema represents a set of
        /// tables in a database.  This schema is used to build the
        /// database modification commands that are used to update the 
        /// database.  This is the first function that must be called 
        /// prior to any other functions being called on the interface.  
        /// Otherwise, an exception will be thrown.
        /// </summary>
        /// <param name="xmlSchema">The schema stream.</param>
        /// <exception cref="ArgumentException" />
        void ReadXmlSchema(Stream xmlSchema);

        /// <summary>
        /// Read in an xml file whose data should be conform to the schema 
        /// of the file specified in the call to <see cref="ReadXmlSchema(string)" />.  
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xmlFile">The xml file.</param>
        /// <exception cref="ArgumentException" />
        void ReadXml(string xmlFile);

        void ReadXml(XmlReader xmlReader);

        /// <summary>
        /// Read in an xml stream whose data should be conform to the schema 
        /// specified in the call to <see cref="ReadXmlSchema(string)" />.  
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xml">The xml stream.</param>
        /// <exception cref="ArgumentException" />
        void ReadXml(Stream xml);

        /// <summary>
        /// Read in an xml file whose data should be conform to the schema 
        /// of the file specified in the call to <see cref="ReadXmlSchema(string)" />.  
        /// The data is appended to any existing data in the dataset.
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xmlFile">The xml file.</param>
        /// <exception cref="ArgumentException" />
        void AppendXml(string xmlFile);

        /// <summary>
        /// Read in an xml stream whose data should be conform to the schema 
        /// specified in the call to <see cref="ReadXmlSchema(string)" />.
        /// The data is appended to any existing data in the dataset.
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xml">The xml stream.</param>
        /// <exception cref="ArgumentException" />
        void AppendXml(Stream xml);

        /// <summary>
        /// Gets a <see cref="DataSet" /> object that contains both the 
        /// internal schema information and data.
        /// </summary>
        /// <returns><see cref="DataSet" /></returns>
        /// <exception cref="NDbUnitException" />
        DataSet CopyDataSet();

        /// <summary>
        /// Gets a <see cref="DataSet" /> object that contains only the 
        /// internal schema information.
        /// </summary>
        /// <returns><see cref="DataSet" /></returns>
        /// <exception cref="NDbUnitException" />
        DataSet CopySchema();

        /// <summary>
        /// Gets a data set from the database tables.  Includes all
        /// table names in the xml schema.
        /// </summary>
        /// <exception cref="NDbUnitException" />
        DataSet GetDataSetFromDb(DbTransaction dbTransaction);

        /// <summary>
        /// Gets a data set from the database tables.
        /// </summary>
        /// <param name="tableNames">The list of table names in the xml 
        /// schema to export. If null, then all table names in the xml 
        /// schema will be exported.</param>
        /// <exception cref="NDbUnitException" />
        DataSet GetDataSetFromDb(StringCollection tableNames, DbTransaction dbTransaction);


        /// <summary>
        /// Gets or sets the command time out.
        /// </summary>
        /// <value>The command time out.</value>
        int CommandTimeOut { get; set; }


        /// <summary>
        /// Executes the scripts.
        /// </summary>
        void ExecuteScripts();


        /// <summary>
        /// Gets the Script Manager.
        /// </summary>
        /// <value>The Script Manager.</value>
        ScriptManager Scripts { get; }

    }
}